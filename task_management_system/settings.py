"""
Django settings for task_management_system project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-eg_6(468drz50j&*u1u1-xw^fdo^h)iy=04-&()rwag!eu7qwc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
        'rest_framework',

    'rest_framework.authtoken',
    'users',
    'tasks'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'task_management_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'task_management_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# docker run --name some-postgres -e POSTGRES_
# docker run --name some-postgres -e POSTGRES_PASSWORD=password -d postgres
# PS D:\rohit\SDE_2_Assignment\task_management_system> docker run --name postgres -e POSTGRES_PASSWORD=password -p 5431:5432 -d postgres
# PS D:\rohit\SDE_2_Assignment\task_management_system> docker exec -it postgres  psql -U postgres
#  .\env\Scripts\activate


# python manage.py createsuperuser
# testuser
# password
# In [1]: from rest_framework.authtoken.models import Token

# In [2]: Token.objects.filter()
# Out[2]: <QuerySet []>

# In [3]: from django.contrib.auth.models import User

# In [4]: User.objects.all()
# Out[4]: <QuerySet [<User: testuser>]>

# In [5]: user = User.objects.all().first()

# In [6]: Token.objects.get_or_create(user=user)
# Out[6]: (<Token: 9fbdb311d98bed76c40f59b7136d8b29dfe07f5e>, True)


# docker run -d --name redis-container -p 6379:6379 redis
# pip install redis django-redis
# (env) PS D:\rohit\SDE_2_Assignment\task_management_system> docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' redis-container
# API Endpoints:
# - POST /tasks/ (Create task)
# - GET /tasks/ (List tasks, filter by ?status=pending)
# - GET /tasks/{id}/ (Retrieve task)
# - PUT /tasks/{id}/ (Update task)
# - DELETE /tasks/{id}/ (Delete task)
# - POST /tasks/{id}/mark_completed/ (Mark as completed & trigger lambda)

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': 'task_management',
    #     'USER': 'postgres',
    #     'PASSWORD': 'password',
    #     'HOST': 'localhost',
    #     'PORT': '5431',
    # }
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mydb',  # Database name from docker-compose.yml
        'USER': 'myuser',  # PostgreSQL username
        'PASSWORD': 'mypassword',  # PostgreSQL password
        'HOST': 'db',  # This must match the service name in docker-compose.yml
        'PORT': '5432',  # Default PostgreSQL port
    }
}
# CACHES = {
#     "default": {
#         "BACKEND": "django.core.cache.backends.redis.RedisCache",
#         # "LOCATION": "redis://172.17.0.4:6379",  # Replace with Redis container IP
#         # "LOCATION": "redis://redis-container:6379",
#         # "LOCATION": "redis://host.docker.internal:6379",
#         "LOCATION": "redis://127.0.0.1:6379",  # Use localhost if Redis is exposed




#     }
# }
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://redis:6379/0",  # Use 'redis' (service name) instead of 127.0.0.1
    }
}
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '50/min'
    }
}
# AKIATF34IEFQYTIXMKGF

# oPQEAcsGvbI0RWl9UvJuXNhqaVjP/glhcsBP2G1Q
AWS_REGION = "us-east-1"
AWS_LAMBDA_NAME = "TaskCompletionNotifier"
AWS_LAMBDA_NAME = "test_func"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
